package com.example.springfilter.filter;import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Component;import org.springframework.web.util.ContentCachingRequestWrapper;import org.springframework.web.util.ContentCachingResponseWrapper;import javax.servlet.*;import javax.servlet.annotation.WebFilter;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.BufferedReader;import java.io.IOException;// servlet의 Filter를 상속/** * HttpServletRequest, HttpServletResponse 말고 * java에서 buffer에서 read를 한 번 해버리면 다시 읽어올 수 없다. * ( getReader() has already been called for this request라는 에러를 뱉음) * ContentCachingRequestWrapper,ContentCachingResponseWrapper 해당 클래스들로 해결. * 캐싱을 한 번 해줘서 다시 읽을 수 있음. * <p> * 특정 컨트롤러에서만 Filter를 적용하고 싶으면 @Component대신 @WebFilter적용. *  urlPattern에 /api/user/*로 들어오는 부분에서만 filter처리함. */@Slf4j//@Component@WebFilter(urlPatterns = "/api/user/*")public class GlobalFilter implements Filter {    @Override    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {        // 전처리        ContentCachingRequestWrapper httpServletRequest = new ContentCachingRequestWrapper((HttpServletRequest) request);        ContentCachingResponseWrapper httpServletResponse = new ContentCachingResponseWrapper((HttpServletResponse) response);        chain.doFilter(httpServletRequest, httpServletResponse);        String url = httpServletRequest.getRequestURI();        // 후처리 : doFilter이후에 찍어야 하는게 핵심.        // req        String reqContent = new String(httpServletRequest.getContentAsByteArray());        log.info("req status: {} , req body: {}", url, reqContent);        String resContent = new String(httpServletResponse.getContentAsByteArray());        int httpStatus = httpServletResponse.getStatus();        httpServletResponse.copyBodyToResponse();        log.info("res status: {} , res body: {}", httpStatus, resContent);    }}