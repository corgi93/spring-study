package com.example.springinterceptor.interceptor;import com.example.springinterceptor.annotation.Auth;import com.example.springinterceptor.exception.AuthException;import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Component;import org.springframework.web.method.HandlerMethod;import org.springframework.web.servlet.HandlerInterceptor;import org.springframework.web.servlet.resource.ResourceHttpRequestHandler;import org.springframework.web.util.UriComponentsBuilder;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.net.URI;@Slf4j@Componentpublic class AuthInterceptor implements HandlerInterceptor {    @Override    public boolean preHandle(            HttpServletRequest request,            HttpServletResponse response,            Object handler    ) throws Exception {        String url = request.getRequestURI();        URI uri =                UriComponentsBuilder.fromUriString(request.getRequestURI())                        .query(request.getQueryString())                        .build()                        .toUri();        log.info("request url :{}", url);        boolean hasAnnotation = checkAnnotation(handler, Auth.class);        log.info("has annotation: {}", hasAnnotation);        // 내 서버는 모두 public으로 동작을 하는데        // 단! Auth권한을 가진 요청에선 쿠키, 세션 등을 보겠다.        if (hasAnnotation) {            // 권한 체크            String query = uri.getQuery();            log.info("query: {}", query);            if (query.equals("name=jin")) {                return true;            }            throw new AuthException();        }        // true가 되야 안의 로직을 탐.        return true;    }    private boolean checkAnnotation(Object handler, Class clazz) {        // resource js, html 은 통과        if (handler instanceof ResourceHttpRequestHandler) {            return true;        }        // annotation 체크        HandlerMethod handlerMethod = (HandlerMethod) handler;        if (handlerMethod.getMethodAnnotation(clazz) != null || handlerMethod.getBeanType().getAnnotation(clazz) != null        ) {            return true;        }        return false;    }}