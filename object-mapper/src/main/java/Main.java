import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.core.type.TypeReference;import com.fasterxml.jackson.databind.JsonNode;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.databind.node.ArrayNode;import com.fasterxml.jackson.databind.node.ObjectNode;import dto.Car;import dto.User;import java.util.Arrays;import java.util.List;public class Main {    public static void main(String args[]) throws JsonProcessingException {        System.out.println("main");        ObjectMapper objectMapper = new ObjectMapper();        User user = new User();        user.setName("홍길동");        user.setAge(10);        Car car1 = new Car();        car1.setName("k5");        car1.setCarNumber("11가 1111");        car1.setType("sedan");        Car car2 = new Car();        car2.setName("Q5");        car2.setCarNumber("22가 2222");        car2.setType("SUV");        // List        List<Car> cars = Arrays.asList(car1, car2);        user.setCars(cars);        // 기본적인 ObjectMapper(jackson) 사용법        String json = objectMapper.writeValueAsString(user);        System.out.println(json);        // 전체를 파싱해서 쓸 수 있지만 각각의 Node에 대해서도 값을 가져와서 처리할 수 있다.        JsonNode jsonNode = objectMapper.readTree(json);        String _name = jsonNode.get("name").asText();        int _age = jsonNode.get("age").asInt();        System.out.println("name: " + _name);        System.out.println("age : " + _age);        JsonNode carList = jsonNode.get("cars");        ArrayNode arrayNode = (ArrayNode) carList;        List<Car> _cars = objectMapper.convertValue(                arrayNode,                new TypeReference<List<Car>>() {                }        );        System.out.println("_cars: " + _cars);        // JSON의 값을 바꾸려면? JsonNode에서는 막아놓음 ObjectNode로 변경        ObjectNode objectNode = (ObjectNode) jsonNode;        objectNode.put("name", "steve");        objectNode.put("age", 20);        System.out.println(objectNode.toPrettyString());    }}