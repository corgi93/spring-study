package com.example.springvalidation.controller;import com.example.springvalidation.controller.dto.CarUser;import com.example.springvalidation.controller.dto.User;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.validation.BindingResult;import org.springframework.validation.FieldError;import org.springframework.validation.annotation.Validated;import org.springframework.web.bind.MethodArgumentNotValidException;import org.springframework.web.bind.annotation.*;import javax.validation.Valid;import javax.validation.constraints.Min;import javax.validation.constraints.NotNull;import javax.validation.constraints.Size;/** * @Validated를 넣어주고  @Size, @NotNull 같이 어노테이션으로 넣어줌. */@RestController@RequestMapping("/api")@Validatedpublic class ApiContoller {    @GetMapping("")    public User get(            @Size(min = 2)            @RequestParam(required = false) String name,            @NotNull            @Min(1)            @RequestParam(required = false) Integer age    ) {        User user = new User();        user.setName(name);        user.setAge(age); // NPE 발생. Integer로 받도록 했는데 int로 들어와서 500 server error.        System.out.println("get user..");        int a = 10 + age;        return user;    }    @PostMapping("")    public User post(@Valid @RequestBody User user) {        System.out.println(user);        return user;    }    @PostMapping("/user")    public ResponseEntity user(@Valid @RequestBody User user, BindingResult bindingResult) {        // bindingResult로 Valid에서 걸리면 예외처리        if (bindingResult.hasErrors()) {            StringBuilder sb = new StringBuilder();            bindingResult.getAllErrors().forEach(objectError -> {                FieldError field = (FieldError) objectError;                String message = objectError.getDefaultMessage();                System.out.println("field : " + field.getField());                System.out.println(message);                sb.append("field : " + field.getField());                sb.append("message : " + message);            });            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(sb.toString());        }        return ResponseEntity.ok(user);    }    @PostMapping("/car-user")    public ResponseEntity user(@Valid @RequestBody CarUser carUser, BindingResult bindingResult) {        // bindingResult로 Valid에서 걸리면 예외처리        if (bindingResult.hasErrors()) {            StringBuilder sb = new StringBuilder();            bindingResult.getAllErrors().forEach(objectError -> {                FieldError field = (FieldError) objectError;                String message = objectError.getDefaultMessage();                System.out.println("field : " + field.getField());                System.out.println(message);                sb.append("field : " + field.getField());                sb.append("message : " + message);            });            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(sb.toString());        }        return ResponseEntity.ok(carUser);    }//    @ExceptionHandler(value = MethodArgumentNotValidException.class)//    public ResponseEntity methodArgumentNotValidException(MethodArgumentNotValidException e) {//        System.out.println("GlobalControllerAdvice보다 Controller안에 있는 Exception이 우선순위.");//        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());//    }}