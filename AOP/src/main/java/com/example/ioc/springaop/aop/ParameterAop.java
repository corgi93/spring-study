package com.example.ioc.springaop.aop;import org.aspectj.lang.JoinPoint;import org.aspectj.lang.annotation.AfterReturning;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Before;import org.aspectj.lang.annotation.Pointcut;import org.aspectj.lang.reflect.MethodSignature;import org.springframework.stereotype.Component;import java.lang.reflect.Method;@Aspect@Componentpublic class ParameterAop {    /**     * Aop로 동작하기 위해 @Aspect     * 스프링에서 관리하도록 @Component     */    // execution 수식은 다양해서 서치해서 찾기    // cut()대신 다른 네이밍을 사용해도 가능.    @Pointcut("execution(* com.example.ioc.springaop.controller.*.*(..))")    private void cut() {    }    @Before("cut()")    public void before(JoinPoint joinPoint) {        System.out.println("---@Before---");        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();        Method method = methodSignature.getMethod();        System.out.println("method: " + method.getName());        Object[] args = joinPoint.getArgs();        for (Object obj : args) {            System.out.println("method: " + obj.getClass().getSimpleName());            System.out.println("value: " + obj);        }    }    @AfterReturning(value = "cut()", returning = "returnObj")    public void afterReturn(            JoinPoint joinPoint,            Object returnObj    ) {        System.out.println("---@AfterReturning---");        System.out.println("jointPoint args: " + joinPoint.getArgs());        System.out.println("returnObj" + returnObj);    }}